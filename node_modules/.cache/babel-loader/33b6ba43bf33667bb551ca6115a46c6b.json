{"ast":null,"code":"function swap(productArray, low, high) {\n  const product = productArray[low];\n  productArray[low] = productArray[high];\n  productArray[high] = product;\n}\n\nfunction partition(productArray, low, high) {\n  const pivot = Number(productArray[high].price);\n  let i = low - 1;\n\n  for (var j = low; j <= high - 1; j++) {\n    if (Number(productArray[j].price) < pivot) {\n      i++;\n      swap(productArray, i, j);\n    }\n  }\n\n  swap(productArray, i + 1, high);\n  return i + 1;\n}\n\nfunction partitionReverse(productArray, low, high) {\n  const pivot = Number(productArray[low].price);\n  let i = low - 1;\n\n  for (var j = low; j <= high - 1; j++) {\n    if (Number(productArray[j].price) > pivot) {\n      i++;\n      swap(productArray, i, j);\n    }\n  }\n\n  swap(productArray, i + 1, high);\n  return i + 1;\n}\n\nfunction quickSortProducts(productArray, low, high) {\n  if (low < high) {\n    let index = partition(productArray, low, high);\n    quickSortProducts(productArray, low, index - 1);\n    quickSortProducts(productArray, index + 1, high);\n  }\n}\n\nfunction quickSortProductsReverse(productArray, low, high) {\n  if (low < high) {\n    let index = partitionReverse(productArray, low, high);\n    quickSortProducts(productArray, low, index - 1);\n    quickSortProducts(productArray, index + 1, high);\n  }\n}\n\nexport { quickSortProducts, quickSortProductsReverse };","map":{"version":3,"sources":["/home/matt/Code/React Course/FinalProject/finalproject/src/components/utils.js"],"names":["swap","productArray","low","high","product","partition","pivot","Number","price","i","j","partitionReverse","quickSortProducts","index","quickSortProductsReverse"],"mappings":"AAAA,SAASA,IAAT,CAAcC,YAAd,EAA4BC,GAA5B,EAAiCC,IAAjC,EAAuC;AACnC,QAAMC,OAAO,GAAGH,YAAY,CAACC,GAAD,CAA5B;AACAD,EAAAA,YAAY,CAACC,GAAD,CAAZ,GAAoBD,YAAY,CAACE,IAAD,CAAhC;AACAF,EAAAA,YAAY,CAACE,IAAD,CAAZ,GAAqBC,OAArB;AACD;;AAED,SAASC,SAAT,CAAmBJ,YAAnB,EAAiCC,GAAjC,EAAsCC,IAAtC,EAA4C;AACxC,QAAMG,KAAK,GAAGC,MAAM,CAACN,YAAY,CAACE,IAAD,CAAZ,CAAmBK,KAApB,CAApB;AACA,MAAIC,CAAC,GAAEP,GAAG,GAAC,CAAX;;AAEA,OAAI,IAAIQ,CAAC,GAACR,GAAV,EAAeQ,CAAC,IAAEP,IAAI,GAAC,CAAvB,EAA0BO,CAAC,EAA3B,EAA8B;AAC1B,QAAGH,MAAM,CAACN,YAAY,CAACS,CAAD,CAAZ,CAAgBF,KAAjB,CAAN,GAAgCF,KAAnC,EAAyC;AACrCG,MAAAA,CAAC;AACDT,MAAAA,IAAI,CAACC,YAAD,EAAcQ,CAAd,EAAgBC,CAAhB,CAAJ;AACH;AACJ;;AACDV,EAAAA,IAAI,CAACC,YAAD,EAAeQ,CAAC,GAAC,CAAjB,EAAoBN,IAApB,CAAJ;AACA,SAAOM,CAAC,GAAC,CAAT;AACH;;AAGD,SAASE,gBAAT,CAA0BV,YAA1B,EAAwCC,GAAxC,EAA6CC,IAA7C,EAAmD;AACjD,QAAMG,KAAK,GAAGC,MAAM,CAACN,YAAY,CAACC,GAAD,CAAZ,CAAkBM,KAAnB,CAApB;AACA,MAAIC,CAAC,GAAEP,GAAG,GAAC,CAAX;;AAEA,OAAI,IAAIQ,CAAC,GAACR,GAAV,EAAeQ,CAAC,IAAEP,IAAI,GAAC,CAAvB,EAA0BO,CAAC,EAA3B,EAA8B;AAC1B,QAAGH,MAAM,CAACN,YAAY,CAACS,CAAD,CAAZ,CAAgBF,KAAjB,CAAN,GAAgCF,KAAnC,EAAyC;AACrCG,MAAAA,CAAC;AACDT,MAAAA,IAAI,CAACC,YAAD,EAAcQ,CAAd,EAAgBC,CAAhB,CAAJ;AACH;AACJ;;AACDV,EAAAA,IAAI,CAACC,YAAD,EAAeQ,CAAC,GAAC,CAAjB,EAAoBN,IAApB,CAAJ;AACA,SAAOM,CAAC,GAAC,CAAT;AACH;;AACC,SAASG,iBAAT,CAA2BX,YAA3B,EAAyCC,GAAzC,EAA8CC,IAA9C,EAAoD;AAElD,MAAGD,GAAG,GAAGC,IAAT,EAAc;AACV,QAAIU,KAAK,GAAGR,SAAS,CAACJ,YAAD,EAAeC,GAAf,EAAoBC,IAApB,CAArB;AACAS,IAAAA,iBAAiB,CAACX,YAAD,EAAeC,GAAf,EAAoBW,KAAK,GAAG,CAA5B,CAAjB;AACAD,IAAAA,iBAAiB,CAACX,YAAD,EAAeY,KAAK,GAAC,CAArB,EAAwBV,IAAxB,CAAjB;AACH;AAEF;;AAED,SAASW,wBAAT,CAAkCb,YAAlC,EAAgDC,GAAhD,EAAqDC,IAArD,EAA2D;AAEzD,MAAGD,GAAG,GAAGC,IAAT,EAAc;AACV,QAAIU,KAAK,GAAGF,gBAAgB,CAACV,YAAD,EAAeC,GAAf,EAAoBC,IAApB,CAA5B;AACAS,IAAAA,iBAAiB,CAACX,YAAD,EAAeC,GAAf,EAAoBW,KAAK,GAAG,CAA5B,CAAjB;AACAD,IAAAA,iBAAiB,CAACX,YAAD,EAAeY,KAAK,GAAC,CAArB,EAAwBV,IAAxB,CAAjB;AACH;AAEF;;AAED,SAAQS,iBAAR,EAA2BE,wBAA3B","sourcesContent":["function swap(productArray, low, high) {\n    const product = productArray[low];\n    productArray[low] = productArray[high];\n    productArray[high] = product;\n  }\n  \n  function partition(productArray, low, high) {\n      const pivot = Number(productArray[high].price);\n      let i=(low-1);\n\n      for(var j=low; j<=high-1; j++){\n          if(Number(productArray[j].price) < pivot){\n              i++;\n              swap(productArray,i,j);\n          }\n      }\n      swap(productArray, i+1, high);\n      return(i+1);\n  }\n  \n\n  function partitionReverse(productArray, low, high) {\n    const pivot = Number(productArray[low].price);\n    let i=(low-1);\n\n    for(var j=low; j<=high-1; j++){\n        if(Number(productArray[j].price) > pivot){\n            i++;\n            swap(productArray,i,j);\n        }\n    }\n    swap(productArray, i+1, high);\n    return(i+1);\n}\n  function quickSortProducts(productArray, low, high) {\n\n    if(low < high){\n        let index = partition(productArray, low, high);\n        quickSortProducts(productArray, low, index - 1);\n        quickSortProducts(productArray, index+1, high);\n    }\n    \n  }\n\n  function quickSortProductsReverse(productArray, low, high) {\n\n    if(low < high){\n        let index = partitionReverse(productArray, low, high);\n        quickSortProducts(productArray, low, index - 1);\n        quickSortProducts(productArray, index+1, high);\n    }\n    \n  }\n\n  export {quickSortProducts, quickSortProductsReverse};"]},"metadata":{},"sourceType":"module"}